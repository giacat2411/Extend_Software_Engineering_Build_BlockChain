# -*- coding: utf-8 -*-
"""PropertyDict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1amwZmD_FxSVJgzOsSOseo5qLXE9_j-OB

## Cài đặt BigchainDB
Chạy ở terminal
"""

# !pip3 install --upgrade setuptools
# !sudo apt-get update
# !sudo apt-get install python3-dev libssl-dev libffi-dev
# !pip3 install bigchaindb_driver

"""## Import thư viện và Kết nối BigchainDB"""

from bigchaindb_driver import BigchainDB
from bigchaindb_driver.common.utils import serialize
from bigchaindb_driver.crypto import generate_keypair
import json
 
bdb_root_url = 'https://test.ipdb.io'
 
bdb = BigchainDB(bdb_root_url)

user = generate_keypair()

print(user)

"""## Kết nối google drive"""

from google.colab import drive
drive.mount('/content/drive')

"""## Đọc dữ liệu

Thay data_file bằng đường link dẫn đến dữ liệu
"""

import json

data_file = "/content/drive/Shareddrives/SE-ex/rv_listing_dataset.json"
data = json.load(open(data_file, "r", encoding="utf8"))
data=data[1008:1020]
print(json.dumps(data, indent=4, ensure_ascii=False))

"""## Functions"""

##  dict_values:    1 dòng trong file json
def add(dict_values):
    addAsset = {}
    addAsset['data']=dict_values
    # pass

    prepare_creation = bdb.transactions.prepare(
        operation='CREATE',
        signers=user.public_key,
        asset=addAsset,
    )
    # print('PREPARE:')
    # print(json.dumps(prepare_creation, indent=4))
    # print()

    fulfilled_creation = bdb.transactions.fulfill(
        prepare_creation, user.private_key
    )
    
    # print('FULFILL:')
    # print(json.dumps(fulfilled_creation, indent=4))
    # print()
        
    # Send the transaction to BigchainDB
    sent_creation = bdb.transactions.send_commit(fulfilled_creation)
    return fulfilled_creation["id"]

##  Change asset fields given in fields variable, field maybe is {field_name:value} or {field_name:dict}
def set_asset_fields(asset, fields):
  if fields == {}:
    return
  for field in fields.keys():
    value = fields[field]
    if type(value) is dict:
      set_asset_fields(asset[field], value)
    else:
      asset[field] = value

def get_asset(asset_id):
  try:
    transactions = bdb.transactions.get(asset_id=asset_id)
  except:
    print("Unable to get transactions!")
    return
  if transactions == [] or transactions is None:
    return {}
  asset = {}
  for transaction in transactions:
    if asset == {}:
      asset = transaction["asset"]["data"]
    else:
      set_asset_fields(asset, transaction["metadata"]["data"])
  return asset

def update(asset_id, input_data_changed):
    transfer_asset = {
        'id' : asset_id
    }
    data_changed = {}
    data_changed['data']=input_data_changed

    # data_changed = {
    #     'data' : {
    #         'Owner' : 111222333
    #     }
    # }
    
    output_index = 0
    
    transactions = bdb.transactions.get(asset_id=asset_id)
    last_transaction = transactions[-1]

    # output = fulfilled_creation['outputs'][output_index]
    output = last_transaction['outputs'][output_index]
    
    transfer_input = {
        'fulfillment': output['condition']['details'],
        'fulfills': {
        'output_index': output_index,
        'transaction_id': last_transaction['id'],
        },
        'owners_before': output['public_keys'],
    }
    
    prepare_creation = bdb.transactions.prepare(
        operation='TRANSFER',
        asset = transfer_asset,
        inputs = transfer_input,
        metadata= data_changed,
        recipients=user.public_key
    )
    
    last_transaction = bdb.transactions.fulfill(
        prepare_creation,
        private_keys=user.private_key
    )
    
    sent_creation = bdb.transactions.send_commit(last_transaction)
    return last_transaction["id"]

"""## Examples"""

idx = add(data[0])
get_asset(idx)

data_tochange = {
    'amenities' : {
        'garage' : True,
        'garden' : True
    },
    'has_video' : True
}
update(idx, data_tochange)
get_asset(idx)

"""## Example Usage"""

data_searched = bdb.assets.get(search="D'Lusso")

if data_searched == []:
  print("not found")
else:
  for item in data_searched:
    print(json.dumps({"data" : get_asset(item["id"]), "id" : item["id"]}, ensure_ascii=False, indent=4))

"""### Choose an asset"""

asset_chosen_id = data_searched[-1]["id"]
print(asset_chosen_id)

"""### Update the chosen asset"""

update(asset_chosen_id, {"furniture_status" : "Full"})
print(json.dumps(get_asset(asset_chosen_id), indent=4, ensure_ascii=False))